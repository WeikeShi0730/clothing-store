{"ast":null,"code":"import { takeLatest, call, put, all } from \"redux-saga/effects\";\nimport UserActionTypes from \"./user.types\";\nimport { auth, googleProvider, createUserProfileDocument } from \"../../firebase/firebase.utils\";\nexport function* signInWithGoogle() {\n  try {\n    const userRef = yield auth.signInWithPopup(googleProvider);\n  } catch (error) {}\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart)]);\n}\n/*this.unsubscribeFromAuth = auth.onAuthStateChanged(async (userAuth) => {\r\n    if (userAuth) {\r\n      const userRef = await createUserProfileDocument(userAuth);\r\n      userRef.onSnapshot((snapShot) => {\r\n        setCurrentUser({\r\n          id: snapShot.id,\r\n          ...snapShot.data(),\r\n        });\r\n      });\r\n    }\r\n    setCurrentUser(userAuth);\r\n}); */\n\n/*\r\n  export const googleProvider = new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n*/","map":{"version":3,"sources":["C:/react/clothing-store/src/redux/user/user.sagas.js"],"names":["takeLatest","call","put","all","UserActionTypes","auth","googleProvider","createUserProfileDocument","signInWithGoogle","userRef","signInWithPopup","error","onGoogleSignInStart","GOOGLE_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SACEC,IADF,EAEEC,cAFF,EAGEC,yBAHF,QAIO,+BAJP;AAMA,OAAO,UAAUC,gBAAV,GAA6B;AAClC,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMJ,IAAI,CAACK,eAAL,CAAqBJ,cAArB,CAAtB;AACD,GAFD,CAEE,OAAOK,KAAP,EAAc,CAAE;AACnB;AAED,OAAO,UAAUC,mBAAV,GAAgC;AACrC,QAAMZ,UAAU,CAACI,eAAe,CAACS,oBAAjB,CAAhB;AACD;AAED,OAAO,UAAUC,SAAV,GAAsB;AAC3B,QAAMX,GAAG,CAAC,CAACF,IAAI,CAACW,mBAAD,CAAL,CAAD,CAAT;AACD;AAED;;;;;;;;;;;;;AAaA","sourcesContent":["import { takeLatest, call, put, all } from \"redux-saga/effects\";\r\n\r\nimport UserActionTypes from \"./user.types\";\r\n\r\nimport {\r\n  auth,\r\n  googleProvider,\r\n  createUserProfileDocument,\r\n} from \"../../firebase/firebase.utils\";\r\n\r\nexport function* signInWithGoogle() {\r\n  try {\r\n    const userRef = yield auth.signInWithPopup(googleProvider);\r\n  } catch (error) {}\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START);\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([call(onGoogleSignInStart)]);\r\n}\r\n\r\n/*this.unsubscribeFromAuth = auth.onAuthStateChanged(async (userAuth) => {\r\n    if (userAuth) {\r\n      const userRef = await createUserProfileDocument(userAuth);\r\n      userRef.onSnapshot((snapShot) => {\r\n        setCurrentUser({\r\n          id: snapShot.id,\r\n          ...snapShot.data(),\r\n        });\r\n      });\r\n    }\r\n    setCurrentUser(userAuth);\r\n}); */\r\n\r\n/*\r\n  export const googleProvider = new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}